#include <GL/glut.h>

GLfloat cameraPositions[][3] = {
    {3, 3, 4.5},
    {10.5, 3, -3},
    {3, 3, -10.5},
    {-4.5, 3, -3}
};

GLfloat cameraTargets[][3] = {
    {3, -2, -20},
    {-20, -2, -3},
    {3, -2, 20},
    {20, -2, -3},
};

int currentCameraPosition = 0;

void drawAxis() {
    glPushMatrix();
    glBegin(GL_LINES);
    GLfloat red[] = { 255.0f / 255.0f, 0.0f / 255.0f, 0.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, red);
    glVertex3f(0, 0, 0); glVertex3f(6.5, 0, 0);
    glPopMatrix();

    glPushMatrix();
    GLfloat green[] = { 0.0f / 255.0f, 255.0f / 255.0f, 0.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, green);
    glVertex3f(0, 0, 0); glVertex3f(0, 4, 0);
    glPopMatrix();

    glPushMatrix();
    GLfloat blue[] = { 0.0f / 255.0f, 0.0f / 255.0f, 255.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, blue);
    glVertex3f(0, 0, 0); glVertex3f(0, 0, -8);
    glEnd();
    glPopMatrix();
}

void drawPlane() {
    GLfloat white[] = { 255.0f / 255.0f, 255.0f / 255.0f, 255.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, white);

    glBegin(GL_LINES);
    for (GLfloat i = 0; i <= 6; i += 0.25) {
        glVertex3f(i, 0, -6);
        glVertex3f(i, 0, 0);
        glVertex3f(6, 0, -i);
        glVertex3f(0, 0, -i);
    }
    glEnd();
}

void drawObjects() {
    glPushMatrix();
    glTranslatef(4.0, 0.5, -1.3);
    GLfloat Purple[] = { 138.0f / 255.0f, 43.0f / 255.0f, 226.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, Purple);
    glutSolidCube(0.75);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(1.5, 0.5, -3.3);
    glRotatef(180.0, 0.0, 1.0, 0.0);
    GLfloat Green[] = { 155.0f / 255.0f, 228.0f / 255.0f, 102.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, Green);
    glutSolidTeapot(0.6);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(3.0, 0.0, -5.0);
    GLfloat orange[] = { 248.0f / 255.0f, 155.0f / 255.0f, 0.0f / 255.0f };
    glMaterialfv(GL_FRONT, GL_AMBIENT, orange);
    glRotatef(-90.0f, 1.0f, 0.0f, 0.0f);
    glutSolidCone(0.5, 1, 20, 20);
    glPopMatrix();
}

void init() {
    glClearColor(0.6, 0.6, 0.6, 1.0);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(60.0, 4.0 / 3.0, 1.0, 15.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(3, 3, 4.5, 3, -2, -20, 0, 1, 0);

    GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat yellow[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat cyan[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat direction[] = { -1.0, 4.0, 7.0, 1.0 };

    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, cyan);
    glMaterialfv(GL_FRONT, GL_SPECULAR, white);
    glMaterialf(GL_FRONT, GL_SHININESS, 30);

    glLightfv(GL_LIGHT0, GL_AMBIENT, black);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, yellow);
    glLightfv(GL_LIGHT0, GL_SPECULAR, white);
    glLightfv(GL_LIGHT0, GL_POSITION, direction);

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(
        cameraPositions[currentCameraPosition][0], cameraPositions[currentCameraPosition][1], cameraPositions[currentCameraPosition][2],
        cameraTargets[currentCameraPosition][0], cameraTargets[currentCameraPosition][1], cameraTargets[currentCameraPosition][2],
        0, 1, 0
    );

    drawObjects();
    drawAxis();
    drawPlane();

    glFlush();
}

void moveCameraWithKey(int key, int x, int y) {
    if (key == GLUT_KEY_RIGHT) {
        currentCameraPosition = (currentCameraPosition + 1) % 4;
    }
    else if (key == GLUT_KEY_LEFT) {
        currentCameraPosition = (currentCameraPosition - 1 + 4) % 4;
    }

    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowPosition(120, 80);
    glutInitWindowSize(1280, 980);
    glutCreateWindow("I/O function");
    glutDisplayFunc(display);
    glutSpecialFunc(moveCameraWithKey);
    init();
    glutMainLoop();
}


